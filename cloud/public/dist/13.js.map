{"version":3,"sources":["webpack:///./public/module/bootstrap-multiselect/bootstrap-multiselect.css?3bf9*","webpack:///./public/module/bootstrap-multiselect/bootstrap-multiselect.js?0192","webpack:///./public/module/bootstrap-multiselect/bootstrap-multiselect.js?4a43*","webpack:///./components/multiselect/index.ts?e700","webpack:///./pages/setting/user/index/index.ts","webpack:///./pages/setting/user/index/index.less"],"names":[],"mappings":"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","file":"13.js","sourcesContent":["// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/module/bootstrap-multiselect/bootstrap-multiselect.css\n// module id = 287\n// module chunks = 12 13","module.exports = \"/**\\r\\n * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)\\r\\n *\\r\\n * Apache License, Version 2.0:\\r\\n * Copyright (c) 2012 - 2015 David Stutz\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not\\r\\n * use this file except in compliance with the License. You may obtain a\\r\\n * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT\\r\\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\\r\\n * License for the specific language governing permissions and limitations\\r\\n * under the License.\\r\\n *\\r\\n * BSD 3-Clause License:\\r\\n * Copyright (c) 2012 - 2015 David Stutz\\r\\n * All rights reserved.\\r\\n *\\r\\n * Redistribution and use in source and binary forms, with or without\\r\\n * modification, are permitted provided that the following conditions are met:\\r\\n *    - Redistributions of source code must retain the above copyright notice,\\r\\n *      this list of conditions and the following disclaimer.\\r\\n *    - Redistributions in binary form must reproduce the above copyright notice,\\r\\n *      this list of conditions and the following disclaimer in the documentation\\r\\n *      and/or other materials provided with the distribution.\\r\\n *    - Neither the name of David Stutz nor the names of its contributors may be\\r\\n *      used to endorse or promote products derived from this software without\\r\\n *      specific prior written permission.\\r\\n *\\r\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\r\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\\r\\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\r\\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\\r\\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\\r\\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\\r\\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\\r\\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\\r\\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\\r\\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\\r\\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\r\\n */\\r\\n!function ($) {\\r\\n    \\\"use strict\\\";// jshint ;_;\\r\\n\\r\\n    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\\r\\n        ko.bindingHandlers.multiselect = {\\r\\n            after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],\\r\\n\\r\\n            init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\\r\\n                var $element = $(element);\\r\\n                var config = ko.toJS(valueAccessor());\\r\\n\\r\\n                $element.multiselect(config);\\r\\n\\r\\n                if (allBindings.has('options')) {\\r\\n                    var options = allBindings.get('options');\\r\\n                    if (ko.isObservable(options)) {\\r\\n                        ko.computed({\\r\\n                            read: function() {\\r\\n                                options();\\r\\n                                setTimeout(function() {\\r\\n                                    var ms = $element.data('multiselect');\\r\\n                                    if (ms)\\r\\n                                        ms.updateOriginalOptions();//Not sure how beneficial this is.\\r\\n                                    $element.multiselect('rebuild');\\r\\n                                }, 1);\\r\\n                            },\\r\\n                            disposeWhenNodeIsRemoved: element\\r\\n                        });\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                //value and selectedOptions are two-way, so these will be triggered even by our own actions.\\r\\n                //It needs some way to tell if they are triggered because of us or because of outside change.\\r\\n                //It doesn't loop but it's a waste of processing.\\r\\n                if (allBindings.has('value')) {\\r\\n                    var value = allBindings.get('value');\\r\\n                    if (ko.isObservable(value)) {\\r\\n                        ko.computed({\\r\\n                            read: function() {\\r\\n                                value();\\r\\n                                setTimeout(function() {\\r\\n                                    $element.multiselect('refresh');\\r\\n                                }, 1);\\r\\n                            },\\r\\n                            disposeWhenNodeIsRemoved: element\\r\\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                //Switched from arrayChange subscription to general subscription using 'refresh'.\\r\\n                //Not sure performance is any better using 'select' and 'deselect'.\\r\\n                if (allBindings.has('selectedOptions')) {\\r\\n                    var selectedOptions = allBindings.get('selectedOptions');\\r\\n                    if (ko.isObservable(selectedOptions)) {\\r\\n                        ko.computed({\\r\\n                            read: function() {\\r\\n                                selectedOptions();\\r\\n                                setTimeout(function() {\\r\\n                                    $element.multiselect('refresh');\\r\\n                                }, 1);\\r\\n                            },\\r\\n                            disposeWhenNodeIsRemoved: element\\r\\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                var setEnabled = function (enable) {\\r\\n                    setTimeout(function () {\\r\\n                        if (enable)\\r\\n                            $element.multiselect('enable');\\r\\n                        else\\r\\n                            $element.multiselect('disable');\\r\\n                    });\\r\\n                };\\r\\n\\r\\n                if (allBindings.has('enable')) {\\r\\n                    var enable = allBindings.get('enable');\\r\\n                    if (ko.isObservable(enable)) {\\r\\n                        ko.computed({\\r\\n                            read: function () {\\r\\n                                setEnabled(enable());\\r\\n                            },\\r\\n                            disposeWhenNodeIsRemoved: element\\r\\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\\r\\n                    } else {\\r\\n                        setEnabled(enable);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (allBindings.has('disable')) {\\r\\n                    var disable = allBindings.get('disable');\\r\\n                    if (ko.isObservable(disable)) {\\r\\n                        ko.computed({\\r\\n                            read: function () {\\r\\n                                setEnabled(!disable());\\r\\n                            },\\r\\n                            disposeWhenNodeIsRemoved: element\\r\\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\\r\\n                    } else {\\r\\n                        setEnabled(!disable);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\\r\\n                    $element.multiselect('destroy');\\r\\n                });\\r\\n            },\\r\\n\\r\\n            update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\\r\\n                var $element = $(element);\\r\\n                var config = ko.toJS(valueAccessor());\\r\\n\\r\\n                $element.multiselect('setOptions', config);\\r\\n                $element.multiselect('rebuild');\\r\\n            }\\r\\n        };\\r\\n    }\\r\\n\\r\\n    function forEach(array, callback) {\\r\\n        for (var index = 0; index < array.length; ++index) {\\r\\n            callback(array[index], index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Constructor to create a new multiselect using the given select.\\r\\n     *\\r\\n     * @param {jQuery} select\\r\\n     * @param {Object} options\\r\\n     * @returns {Multiselect}\\r\\n     */\\r\\n    function Multiselect(select, options) {\\r\\n\\r\\n        this.$select = $(select);\\r\\n\\r\\n        // Placeholder via data attributes\\r\\n        if (this.$select.attr(\\\"data-placeholder\\\")) {\\r\\n            options.nonSelectedText = this.$select.data(\\\"placeholder\\\");\\r\\n        }\\r\\n\\r\\n        this.options = this.mergeOptions($.extend({}, options, this.$select.data()));\\r\\n\\r\\n        // Initialization.\\r\\n        // We have to clone to create a new reference.\\r\\n        this.originalOptions = this.$select.clone()[0].options;\\r\\n        this.query = '';\\r\\n        this.searchTimeout = null;\\r\\n        this.lastToggledInput = null;\\r\\n\\r\\n        this.options.multiple = this.$select.attr('multiple') === \\\"multiple\\\";\\r\\n        this.options.onChange = $.proxy(this.options.onChange, this);\\r\\n        this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\\r\\n        this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\\r\\n        this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\\r\\n        this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\\r\\n        this.options.onInitialized = $.proxy(this.options.onInitialized, this);\\r\\n\\r\\n        // Build select all if enabled.\\r\\n        this.buildContainer();\\r\\n        this.buildButton();\\r\\n        this.buildDropdown();\\r\\n        this.buildSelectAll();\\r\\n        this.buildDropdownOptions();\\r\\n        this.buildFilter();\\r\\n\\r\\n        this.updateButtonText();\\r\\n        this.updateSelectAll(true);\\r\\n\\r\\n        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\\r\\n            this.disable();\\r\\n        }\\r\\n\\r\\n        this.$select.hide().after(this.$container);\\r\\n        this.options.onInitialized(this.$select, this.$container);\\r\\n    }\\r\\n\\r\\n    Multiselect.prototype = {\\r\\n\\r\\n        defaults: {\\r\\n            /**\\r\\n             * Default text function will either print 'None selected' in case no\\r\\n             * option is selected or a list of the selected options up to a length\\r\\n             * of 3 selected options.\\r\\n             *\\r\\n             * @param {jQuery} options\\r\\n             * @param {jQuery} select\\r\\n             * @returns {String}\\r\\n             */\\r\\n            buttonText: function(options, select) {\\r\\n                if (this.disabledText.length > 0\\r\\n                        && (this.disableIfEmpty || select.prop('disabled'))\\r\\n                        && options.length == 0) {\\r\\n\\r\\n                    return this.disabledText;\\r\\n                }\\r\\n                else if (options.length === 0) {\\r\\n                    return this.nonSelectedText;\\r\\n                }\\r\\n                else if (this.allSelectedText\\r\\n                        && options.length === $('option', $(select)).length\\r\\n                        && $('option', $(select)).length !== 1\\r\\n                        && this.multiple) {\\r\\n\\r\\n                    if (this.selectAllNumber) {\\r\\n                        return this.allSelectedText + ' (' + options.length + ')';\\r\\n                    }\\r\\n                    else {\\r\\n                        return this.allSelectedText;\\r\\n                    }\\r\\n                }\\r\\n                else if (options.length > this.numberDisplayed) {\\r\\n                    return options.length + ' ' + this.nSelectedText;\\r\\n                }\\r\\n                else {\\r\\n                    var selected = '';\\r\\n                    var delimiter = this.delimiterText;\\r\\n\\r\\n                    options.each(function() {\\r\\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\\r\\n                        selected += label + delimiter;\\r\\n                    });\\r\\n\\r\\n                    return selected.substr(0, selected.length - 2);\\r\\n                }\\r\\n            },\\r\\n            /**\\r\\n             * Updates the title of the button similar to the buttonText function.\\r\\n             *\\r\\n             * @param {jQuery} options\\r\\n             * @param {jQuery} select\\r\\n             * @returns {@exp;selected@call;substr}\\r\\n             */\\r\\n            buttonTitle: function(options, select) {\\r\\n                if (options.length === 0) {\\r\\n                    return this.nonSelectedText;\\r\\n                }\\r\\n                else {\\r\\n                    var selected = '';\\r\\n                    var delimiter = this.delimiterText;\\r\\n\\r\\n                    options.each(function () {\\r\\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\\r\\n                        selected += label + delimiter;\\r\\n                    });\\r\\n                    return selected.substr(0, selected.length - 2);\\r\\n                }\\r\\n            },\\r\\n            /**\\r\\n             * Create a label.\\r\\n             *\\r\\n             * @param {jQuery} element\\r\\n             * @returns {String}\\r\\n             */\\r\\n            optionLabel: function(element){\\r\\n                return $(element).attr('label') || $(element).text();\\r\\n            },\\r\\n            /**\\r\\n             * Create a class.\\r\\n             *\\r\\n             * @param {jQuery} element\\r\\n             * @returns {String}\\r\\n             */\\r\\n            optionClass: function(element) {\\r\\n                return $(element).attr('class') || '';\\r\\n            },\\r\\n            /**\\r\\n             * Triggered on change of the multiselect.\\r\\n             *\\r\\n             * Not triggered when selecting/deselecting options manually.\\r\\n             *\\r\\n             * @param {jQuery} option\\r\\n             * @param {Boolean} checked\\r\\n             */\\r\\n            onChange : function(option, checked) {\\r\\n\\r\\n            },\\r\\n            /**\\r\\n             * Triggered when the dropdown is shown.\\r\\n             *\\r\\n             * @param {jQuery} event\\r\\n             */\\r\\n            onDropdownShow: function(event) {\\r\\n\\r\\n            },\\r\\n            /**\\r\\n             * Triggered when the dropdown is hidden.\\r\\n             *\\r\\n             * @param {jQuery} event\\r\\n             */\\r\\n            onDropdownHide: function(event) {\\r\\n\\r\\n            },\\r\\n            /**\\r\\n             * Triggered after the dropdown is shown.\\r\\n             *\\r\\n             * @param {jQuery} event\\r\\n             */\\r\\n            onDropdownShown: function(event) {\\r\\n\\r\\n            },\\r\\n            /**\\r\\n             * Triggered after the dropdown is hidden.\\r\\n             *\\r\\n             * @param {jQuery} event\\r\\n             */\\r\\n            onDropdownHidden: function(event) {\\r\\n\\r\\n            },\\r\\n            /**\\r\\n             * Triggered on select all.\\r\\n             */\\r\\n            onSelectAll: function(checked) {\\r\\n\\r\\n            },\\r\\n            /**\\r\\n             * Triggered after initializing.\\r\\n             *\\r\\n             * @param {jQuery} $select\\r\\n             * @param {jQuery} $container\\r\\n             */\\r\\n            onInitialized: function($select, $container) {\\r\\n\\r\\n            },\\r\\n            enableHTML: false,\\r\\n            buttonClass: 'btn btn-default',\\r\\n            inheritClass: false,\\r\\n            buttonWidth: 'auto',\\r\\n            buttonContainer: '<div class=\\\"btn-group\\\" />',\\r\\n            dropRight: false,\\r\\n            dropUp: false,\\r\\n            selectedClass: 'active',\\r\\n            // Maximum height of the dropdown menu.\\r\\n            // If maximum height is exceeded a scrollbar will be displayed.\\r\\n            maxHeight: false,\\r\\n            checkboxName: false,\\r\\n            includeSelectAllOption: false,\\r\\n            includeSelectAllIfMoreThan: 0,\\r\\n            selectAllText: ' Select all',\\r\\n            selectAllValue: 'multiselect-all',\\r\\n            selectAllName: false,\\r\\n            selectAllNumber: true,\\r\\n            selectAllJustVisible: true,\\r\\n            enableFiltering: false,\\r\\n            enableCaseInsensitiveFiltering: false,\\r\\n            enableFullValueFiltering: false,\\r\\n            enableClickableOptGroups: false,\\r\\n            enableCollapsibelOptGroups: false,\\r\\n            filterPlaceholder: 'Search',\\r\\n            // possible options: 'text', 'value', 'both'\\r\\n            filterBehavior: 'text',\\r\\n            includeFilterClearBtn: true,\\r\\n            preventInputChangeEvent: false,\\r\\n            nonSelectedText: 'None selected',\\r\\n            nSelectedText: 'selected',\\r\\n            allSelectedText: 'All selected',\\r\\n            numberDisplayed: 3,\\r\\n            disableIfEmpty: false,\\r\\n            disabledText: '',\\r\\n            delimiterText: ', ',\\r\\n            templates: {\\r\\n                button: '<button type=\\\"button\\\" class=\\\"multiselect dropdown-toggle\\\" data-toggle=\\\"dropdown\\\"><span class=\\\"multiselect-selected-text\\\"></span> <b class=\\\"caret\\\"></b></button>',\\r\\n                ul: '<ul class=\\\"multiselect-container dropdown-menu\\\"></ul>',\\r\\n                filter: '<li class=\\\"multiselect-item filter\\\"><div class=\\\"input-group\\\"><span class=\\\"input-group-addon\\\"><i class=\\\"glyphicon glyphicon-search\\\"></i></span><input class=\\\"form-control multiselect-search\\\" type=\\\"text\\\"></div></li>',\\r\\n                filterClearBtn: '<span class=\\\"input-group-btn\\\"><button class=\\\"btn btn-default multiselect-clear-filter\\\" type=\\\"button\\\"><i class=\\\"glyphicon glyphicon-remove-circle\\\"></i></button></span>',\\r\\n                li: '<li><a tabindex=\\\"0\\\"><label></label></a></li>',\\r\\n                divider: '<li class=\\\"multiselect-item divider\\\"></li>',\\r\\n                liGroup: '<li class=\\\"multiselect-item multiselect-group\\\"><label></label></li>'\\r\\n            }\\r\\n        },\\r\\n\\r\\n        constructor: Multiselect,\\r\\n\\r\\n        /**\\r\\n         * Builds the container of the multiselect.\\r\\n         */\\r\\n        buildContainer: function() {\\r\\n            this.$container = $(this.options.buttonContainer);\\r\\n            this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\\r\\n            this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\\r\\n            this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\\r\\n            this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Builds the button of the multiselect.\\r\\n         */\\r\\n        buildButton: function() {\\r\\n            this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\\r\\n            if (this.$select.attr('class') && this.options.inheritClass) {\\r\\n                this.$button.addClass(this.$select.attr('class'));\\r\\n            }\\r\\n            // Adopt active state.\\r\\n            if (this.$select.prop('disabled')) {\\r\\n                this.disable();\\r\\n            }\\r\\n            else {\\r\\n                this.enable();\\r\\n            }\\r\\n\\r\\n            // Manually add button width if set.\\r\\n            if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\\r\\n                this.$button.css({\\r\\n                    'width' : this.options.buttonWidth,\\r\\n                    'overflow' : 'hidden',\\r\\n                    'text-overflow' : 'ellipsis'\\r\\n                });\\r\\n                this.$container.css({\\r\\n                    'width': this.options.buttonWidth\\r\\n                });\\r\\n            }\\r\\n\\r\\n            // Keep the tab index from the select.\\r\\n            var tabindex = this.$select.attr('tabindex');\\r\\n            if (tabindex) {\\r\\n                this.$button.attr('tabindex', tabindex);\\r\\n            }\\r\\n\\r\\n            this.$container.prepend(this.$button);\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Builds the ul representing the dropdown menu.\\r\\n         */\\r\\n        buildDropdown: function() {\\r\\n\\r\\n            // Build ul.\\r\\n            this.$ul = $(this.options.templates.ul);\\r\\n\\r\\n            if (this.options.dropRight) {\\r\\n                this.$ul.addClass('pull-right');\\r\\n            }\\r\\n\\r\\n            // Set max height of dropdown menu to activate auto scrollbar.\\r\\n            if (this.options.maxHeight) {\\r\\n                // TODO: Add a class for this option to move the css declarations.\\r\\n                this.$ul.css({\\r\\n                    'max-height': this.options.maxHeight + 'px',\\r\\n                    'overflow-y': 'auto',\\r\\n                    'overflow-x': 'hidden'\\r\\n                });\\r\\n            }\\r\\n\\r\\n            if (this.options.dropUp) {\\r\\n\\r\\n                var height = Math.min(this.options.maxHeight, $('option[data-role!=\\\"divider\\\"]', this.$select).length*26 + $('option[data-role=\\\"divider\\\"]', this.$select).length*19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));\\r\\n                var moveCalc = height + 34;\\r\\n\\r\\n                this.$ul.css({\\r\\n                    'max-height': height + 'px',\\r\\n                    'overflow-y': 'auto',\\r\\n                    'overflow-x': 'hidden',\\r\\n                    'margin-top': \\\"-\\\" + moveCalc + 'px'\\r\\n                });\\r\\n            }\\r\\n\\r\\n            this.$container.append(this.$ul);\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Build the dropdown options and binds all nessecary events.\\r\\n         *\\r\\n         * Uses createDivider and createOptionValue to create the necessary options.\\r\\n         */\\r\\n        buildDropdownOptions: function() {\\r\\n\\r\\n            this.$select.children().each($.proxy(function(index, element) {\\r\\n\\r\\n                var $element = $(element);\\r\\n                // Support optgroups and options without a group simultaneously.\\r\\n                var tag = $element.prop('tagName')\\r\\n                    .toLowerCase();\\r\\n\\r\\n                if ($element.prop('value') === this.options.selectAllValue) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (tag === 'optgroup') {\\r\\n                    this.createOptgroup(element);\\r\\n                }\\r\\n                else if (tag === 'option') {\\r\\n\\r\\n                    if ($element.data('role') === 'divider') {\\r\\n                        this.createDivider();\\r\\n                    }\\r\\n                    else {\\r\\n                        this.createOptionValue(element);\\r\\n                    }\\r\\n\\r\\n                }\\r\\n\\r\\n                // Other illegal tags will be ignored.\\r\\n            }, this));\\r\\n\\r\\n            // Bind the change event on the dropdown elements.\\r\\n            $('li input', this.$ul).on('change', $.proxy(function(event) {\\r\\n                var $target = $(event.target);\\r\\n\\r\\n                var checked = $target.prop('checked') || false;\\r\\n                var isSelectAllOption = $target.val() === this.options.selectAllValue;\\r\\n\\r\\n                // Apply or unapply the configured selected class.\\r\\n                if (this.options.selectedClass) {\\r\\n                    if (checked) {\\r\\n                        $target.closest('li')\\r\\n                            .addClass(this.options.selectedClass);\\r\\n                    }\\r\\n                    else {\\r\\n                        $target.closest('li')\\r\\n                            .removeClass(this.options.selectedClass);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Get the corresponding option.\\r\\n                var value = $target.val();\\r\\n                var $option = this.getOptionByValue(value);\\r\\n\\r\\n                var $optionsNotThis = $('option', this.$select).not($option);\\r\\n                var $checkboxesNotThis = $('input', this.$container).not($target);\\r\\n\\r\\n                if (isSelectAllOption) {\\r\\n                    if (checked) {\\r\\n                        this.selectAll(this.options.selectAllJustVisible);\\r\\n                    }\\r\\n                    else {\\r\\n                        this.deselectAll(this.options.selectAllJustVisible);\\r\\n                    }\\r\\n                }\\r\\n                else {\\r\\n                    if (checked) {\\r\\n                        $option.prop('selected', true);\\r\\n\\r\\n                        if (this.options.multiple) {\\r\\n                            // Simply select additional option.\\r\\n                            $option.prop('selected', true);\\r\\n                        }\\r\\n                        else {\\r\\n                            // Unselect all other options and corresponding checkboxes.\\r\\n                            if (this.options.selectedClass) {\\r\\n                                $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);\\r\\n                            }\\r\\n\\r\\n                            $($checkboxesNotThis).prop('checked', false);\\r\\n                            $optionsNotThis.prop('selected', false);\\r\\n\\r\\n                            // It's a single selection, so close.\\r\\n                            this.$button.click();\\r\\n                        }\\r\\n\\r\\n                        if (this.options.selectedClass === \\\"active\\\") {\\r\\n                            $optionsNotThis.closest(\\\"a\\\").css(\\\"outline\\\", \\\"\\\");\\r\\n                        }\\r\\n                    }\\r\\n                    else {\\r\\n                        // Unselect option.\\r\\n                        $option.prop('selected', false);\\r\\n                    }\\r\\n\\r\\n                    // To prevent select all from firing onChange: #575\\r\\n                    this.options.onChange($option, checked);\\r\\n                }\\r\\n\\r\\n                this.$select.change();\\r\\n\\r\\n                this.updateButtonText();\\r\\n                this.updateSelectAll();\\r\\n\\r\\n                if(this.options.preventInputChangeEvent) {\\r\\n                    return false;\\r\\n                }\\r\\n            }, this));\\r\\n\\r\\n            $('li a', this.$ul).on('mousedown', function(e) {\\r\\n                if (e.shiftKey) {\\r\\n                    // Prevent selecting text by Shift+click\\r\\n                    return false;\\r\\n                }\\r\\n            });\\r\\n\\r\\n            $('li a', this.$ul).on('touchstart click', $.proxy(function(event) {\\r\\n                event.stopPropagation();\\r\\n\\r\\n                var $target = $(event.target);\\r\\n\\r\\n                if (event.shiftKey && this.options.multiple) {\\r\\n                    if($target.is(\\\"label\\\")){ // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\\r\\n                        event.preventDefault();\\r\\n                        $target = $target.find(\\\"input\\\");\\r\\n                        $target.prop(\\\"checked\\\", !$target.prop(\\\"checked\\\"));\\r\\n                    }\\r\\n                    var checked = $target.prop('checked') || false;\\r\\n\\r\\n                    if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range\\r\\n                        var from = $target.closest(\\\"li\\\").index();\\r\\n                        var to = this.lastToggledInput.closest(\\\"li\\\").index();\\r\\n\\r\\n                        if (from > to) { // Swap the indices\\r\\n                            var tmp = to;\\r\\n                            to = from;\\r\\n                            from = tmp;\\r\\n                        }\\r\\n\\r\\n                        // Make sure we grab all elements since slice excludes the last index\\r\\n                        ++to;\\r\\n\\r\\n                        // Change the checkboxes and underlying options\\r\\n                        var range = this.$ul.find(\\\"li\\\").slice(from, to).find(\\\"input\\\");\\r\\n\\r\\n                        range.prop('checked', checked);\\r\\n\\r\\n                        if (this.options.selectedClass) {\\r\\n                            range.closest('li')\\r\\n                                .toggleClass(this.options.selectedClass, checked);\\r\\n                        }\\r\\n\\r\\n                        for (var i = 0, j = range.length; i < j; i++) {\\r\\n                            var $checkbox = $(range[i]);\\r\\n\\r\\n                            var $option = this.getOptionByValue($checkbox.val());\\r\\n\\r\\n                            $option.prop('selected', checked);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    // Trigger the select \\\"change\\\" event\\r\\n                    $target.trigger(\\\"change\\\");\\r\\n                }\\r\\n\\r\\n                // Remembers last clicked option\\r\\n                if($target.is(\\\"input\\\") && !$target.closest(\\\"li\\\").is(\\\".multiselect-item\\\")){\\r\\n                    this.lastToggledInput = $target;\\r\\n                }\\r\\n\\r\\n                $target.blur();\\r\\n            }, this));\\r\\n\\r\\n            // Keyboard support.\\r\\n            this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function(event) {\\r\\n                if ($('input[type=\\\"text\\\"]', this.$container).is(':focus')) {\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (event.keyCode === 9 && this.$container.hasClass('open')) {\\r\\n                    this.$button.click();\\r\\n                }\\r\\n                else {\\r\\n                    var $items = $(this.$container).find(\\\"li:not(.divider):not(.disabled) a\\\").filter(\\\":visible\\\");\\r\\n\\r\\n                    if (!$items.length) {\\r\\n                        return;\\r\\n                    }\\r\\n\\r\\n                    var index = $items.index($items.filter(':focus'));\\r\\n\\r\\n                    // Navigation up.\\r\\n                    if (event.keyCode === 38 && index > 0) {\\r\\n                        index--;\\r\\n                    }\\r\\n                    // Navigate down.\\r\\n                    else if (event.keyCode === 40 && index < $items.length - 1) {\\r\\n                        index++;\\r\\n                    }\\r\\n                    else if (!~index) {\\r\\n                        index = 0;\\r\\n                    }\\r\\n\\r\\n                    var $current = $items.eq(index);\\r\\n                    $current.focus();\\r\\n\\r\\n                    if (event.keyCode === 32 || event.keyCode === 13) {\\r\\n                        var $checkbox = $current.find('input');\\r\\n\\r\\n                        $checkbox.prop(\\\"checked\\\", !$checkbox.prop(\\\"checked\\\"));\\r\\n                        $checkbox.change();\\r\\n                    }\\r\\n\\r\\n                    event.stopPropagation();\\r\\n                    event.preventDefault();\\r\\n                }\\r\\n            }, this));\\r\\n\\r\\n            if(this.options.enableClickableOptGroups && this.options.multiple) {\\r\\n                $('li.multiselect-group', this.$ul).on('click', $.proxy(function(event) {\\r\\n                    event.stopPropagation();\\r\\n                    console.log('test');\\r\\n                    var group = $(event.target).parent();\\r\\n\\r\\n                    // Search all option in optgroup\\r\\n                    var $options = group.nextUntil('li.multiselect-group');\\r\\n                    var $visibleOptions = $options.filter(\\\":visible:not(.disabled)\\\");\\r\\n\\r\\n                    // check or uncheck items\\r\\n                    var allChecked = true;\\r\\n                    var optionInputs = $visibleOptions.find('input');\\r\\n                    var values = [];\\r\\n\\r\\n                    optionInputs.each(function() {\\r\\n                        allChecked = allChecked && $(this).prop('checked');\\r\\n                        values.push($(this).val());\\r\\n                    });\\r\\n\\r\\n                    if (!allChecked) {\\r\\n                        this.select(values, false);\\r\\n                    }\\r\\n                    else {\\r\\n                        this.deselect(values, false);\\r\\n                    }\\r\\n\\r\\n                    this.options.onChange(optionInputs, !allChecked);\\r\\n               }, this));\\r\\n            }\\r\\n\\r\\n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\\r\\n                $(\\\"li.multiselect-group input\\\", this.$ul).off();\\r\\n                $(\\\"li.multiselect-group\\\", this.$ul).siblings().not(\\\"li.multiselect-group, li.multiselect-all\\\", this.$ul).each( function () {\\r\\n                    $(this).toggleClass('hidden', true);\\r\\n                });\\r\\n\\r\\n                $(\\\"li.multiselect-group\\\", this.$ul).on(\\\"click\\\", $.proxy(function(group) {\\r\\n                    group.stopPropagation();\\r\\n                }, this));\\r\\n\\r\\n                $(\\\"li.multiselect-group > a > b\\\", this.$ul).on(\\\"click\\\", $.proxy(function(t) {\\r\\n                    t.stopPropagation();\\r\\n                    var n = $(t.target).closest('li');\\r\\n                    var r = n.nextUntil(\\\"li.multiselect-group\\\");\\r\\n                    var i = true;\\r\\n\\r\\n                    r.each(function() {\\r\\n                        i = i && $(this).hasClass('hidden');\\r\\n                    });\\r\\n\\r\\n                    r.toggleClass('hidden', !i);\\r\\n                }, this));\\r\\n\\r\\n                $(\\\"li.multiselect-group > a > input\\\", this.$ul).on(\\\"change\\\", $.proxy(function(t) {\\r\\n                    t.stopPropagation();\\r\\n                    var n = $(t.target).closest('li');\\r\\n                    var r = n.nextUntil(\\\"li.multiselect-group\\\", ':not(.disabled)');\\r\\n                    var s = r.find(\\\"input\\\");\\r\\n\\r\\n                    var i = true;\\r\\n                    s.each(function() {\\r\\n                        i = i && $(this).prop(\\\"checked\\\");\\r\\n                    });\\r\\n\\r\\n                    s.prop(\\\"checked\\\", !i).trigger(\\\"change\\\");\\r\\n                }, this));\\r\\n\\r\\n                // Set the initial selection state of the groups.\\r\\n                $('li.multiselect-group', this.$ul).each(function() {\\r\\n                    var r = $(this).nextUntil(\\\"li.multiselect-group\\\", ':not(.disabled)');\\r\\n                    var s = r.find(\\\"input\\\");\\r\\n\\r\\n                    var i = true;\\r\\n                    s.each(function() {\\r\\n                        i = i && $(this).prop(\\\"checked\\\");\\r\\n                    });\\r\\n\\r\\n                    $(this).find('input').prop(\\\"checked\\\", i);\\r\\n                });\\r\\n\\r\\n                // Update the group checkbox based on new selections among the\\r\\n                // corresponding children.\\r\\n                $(\\\"li input\\\", this.$ul).on(\\\"change\\\", $.proxy(function(t) {\\r\\n                    t.stopPropagation();\\r\\n                    var n = $(t.target).closest('li');\\r\\n                    var r1 = n.prevUntil(\\\"li.multiselect-group\\\", ':not(.disabled)');\\r\\n                    var r2 = n.nextUntil(\\\"li.multiselect-group\\\", ':not(.disabled)');\\r\\n                    var s1 = r1.find(\\\"input\\\");\\r\\n                    var s2 = r2.find(\\\"input\\\");\\r\\n\\r\\n                    var i = $(t.target).prop('checked');\\r\\n                    s1.each(function() {\\r\\n                        i = i && $(this).prop(\\\"checked\\\");\\r\\n                    });\\r\\n\\r\\n                    s2.each(function() {\\r\\n                        i = i && $(this).prop(\\\"checked\\\");\\r\\n                    });\\r\\n\\r\\n                    n.prevAll('.multiselect-group').find('input').prop('checked', i);\\r\\n                }, this));\\r\\n\\r\\n                $(\\\"li.multiselect-all\\\", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');\\r\\n                $(\\\"li.multiselect-group > a, li.multiselect-all > a > label.checkbox\\\", this.$ul).css('padding', '3px 20px 3px 35px');\\r\\n                $(\\\"li.multiselect-group > a > input\\\", this.$ul).css('margin', '4px 0px 5px -20px');\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Create an option using the given select option.\\r\\n         *\\r\\n         * @param {jQuery} element\\r\\n         */\\r\\n        createOptionValue: function(element) {\\r\\n            var $element = $(element);\\r\\n            if ($element.is(':selected')) {\\r\\n                $element.prop('selected', true);\\r\\n            }\\r\\n\\r\\n            // Support the label attribute on options.\\r\\n            var label = this.options.optionLabel(element);\\r\\n            var classes = this.options.optionClass(element);\\r\\n            var value = $element.val();\\r\\n            var inputType = this.options.multiple ? \\\"checkbox\\\" : \\\"radio\\\";\\r\\n\\r\\n            var $li = $(this.options.templates.li);\\r\\n            var $label = $('label', $li);\\r\\n            $label.addClass(inputType);\\r\\n            $li.addClass(classes);\\r\\n\\r\\n            if (this.options.enableHTML) {\\r\\n                $label.html(\\\" \\\" + label);\\r\\n            }\\r\\n            else {\\r\\n                $label.text(\\\" \\\" + label);\\r\\n            }\\r\\n\\r\\n            var $checkbox = $('<input/>').attr('type', inputType);\\r\\n\\r\\n            if (this.options.checkboxName) {\\r\\n                $checkbox.attr('name', this.options.checkboxName);\\r\\n            }\\r\\n            $label.prepend($checkbox);\\r\\n\\r\\n            var selected = $element.prop('selected') || false;\\r\\n            $checkbox.val(value);\\r\\n\\r\\n            if (value === this.options.selectAllValue) {\\r\\n                $li.addClass(\\\"multiselect-item multiselect-all\\\");\\r\\n                $checkbox.parent().parent()\\r\\n                    .addClass('multiselect-all');\\r\\n            }\\r\\n\\r\\n            $label.attr('title', $element.attr('title'));\\r\\n\\r\\n            this.$ul.append($li);\\r\\n\\r\\n            if ($element.is(':disabled')) {\\r\\n                $checkbox.attr('disabled', 'disabled')\\r\\n                    .prop('disabled', true)\\r\\n                    .closest('a')\\r\\n                    .attr(\\\"tabindex\\\", \\\"-1\\\")\\r\\n                    .closest('li')\\r\\n                    .addClass('disabled');\\r\\n            }\\r\\n\\r\\n            $checkbox.prop('checked', selected);\\r\\n\\r\\n            if (selected && this.options.selectedClass) {\\r\\n                $checkbox.closest('li')\\r\\n                    .addClass(this.options.selectedClass);\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Creates a divider using the given select option.\\r\\n         *\\r\\n         * @param {jQuery} element\\r\\n         */\\r\\n        createDivider: function(element) {\\r\\n            var $divider = $(this.options.templates.divider);\\r\\n            this.$ul.append($divider);\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Creates an optgroup.\\r\\n         *\\r\\n         * @param {jQuery} group\\r\\n         */\\r\\n        createOptgroup: function(group) {\\r\\n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\\r\\n                var label = $(group).attr(\\\"label\\\");\\r\\n                var value = $(group).attr(\\\"value\\\");\\r\\n                var r = $('<li class=\\\"multiselect-item multiselect-group\\\"><a href=\\\"javascript:void(0);\\\"><input type=\\\"checkbox\\\" value=\\\"' + value + '\\\"/><b> ' + label + '<b class=\\\"caret\\\"></b></b></a></li>');\\r\\n\\r\\n                if (this.options.enableClickableOptGroups) {\\r\\n                    r.addClass(\\\"multiselect-group-clickable\\\")\\r\\n                }\\r\\n                this.$ul.append(r);\\r\\n                if ($(group).is(\\\":disabled\\\")) {\\r\\n                    r.addClass(\\\"disabled\\\")\\r\\n                }\\r\\n                $(\\\"option\\\", group).each($.proxy(function($, group) {\\r\\n                    this.createOptionValue(group)\\r\\n                }, this))\\r\\n            }\\r\\n            else {\\r\\n                var groupName = $(group).prop('label');\\r\\n\\r\\n                // Add a header for the group.\\r\\n                var $li = $(this.options.templates.liGroup);\\r\\n\\r\\n                if (this.options.enableHTML) {\\r\\n                    $('label', $li).html(groupName);\\r\\n                }\\r\\n                else {\\r\\n                    $('label', $li).text(groupName);\\r\\n                }\\r\\n\\r\\n                if (this.options.enableClickableOptGroups) {\\r\\n                    $li.addClass('multiselect-group-clickable');\\r\\n                }\\r\\n\\r\\n                this.$ul.append($li);\\r\\n\\r\\n                if ($(group).is(':disabled')) {\\r\\n                    $li.addClass('disabled');\\r\\n                }\\r\\n\\r\\n                // Add the options of the group.\\r\\n                $('option', group).each($.proxy(function(index, element) {\\r\\n                    this.createOptionValue(element);\\r\\n                }, this));\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Build the select all.\\r\\n         *\\r\\n         * Checks if a select all has already been created.\\r\\n         */\\r\\n        buildSelectAll: function() {\\r\\n            if (typeof this.options.selectAllValue === 'number') {\\r\\n                this.options.selectAllValue = this.options.selectAllValue.toString();\\r\\n            }\\r\\n\\r\\n            var alreadyHasSelectAll = this.hasSelectAll();\\r\\n\\r\\n            if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple\\r\\n                    && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\\r\\n\\r\\n                // Check whether to add a divider after the select all.\\r\\n                if (this.options.includeSelectAllDivider) {\\r\\n                    this.$ul.prepend($(this.options.templates.divider));\\r\\n                }\\r\\n\\r\\n                var $li = $(this.options.templates.li);\\r\\n                $('label', $li).addClass(\\\"checkbox\\\");\\r\\n\\r\\n                if (this.options.enableHTML) {\\r\\n                    $('label', $li).html(\\\" \\\" + this.options.selectAllText);\\r\\n                }\\r\\n                else {\\r\\n                    $('label', $li).text(\\\" \\\" + this.options.selectAllText);\\r\\n                }\\r\\n\\r\\n                if (this.options.selectAllName) {\\r\\n                    $('label', $li).prepend('<input type=\\\"checkbox\\\" name=\\\"' + this.options.selectAllName + '\\\" />');\\r\\n                }\\r\\n                else {\\r\\n                    $('label', $li).prepend('<input type=\\\"checkbox\\\" />');\\r\\n                }\\r\\n\\r\\n                var $checkbox = $('input', $li);\\r\\n                $checkbox.val(this.options.selectAllValue);\\r\\n\\r\\n                $li.addClass(\\\"multiselect-item multiselect-all\\\");\\r\\n                $checkbox.parent().parent()\\r\\n                    .addClass('multiselect-all');\\r\\n\\r\\n                this.$ul.prepend($li);\\r\\n\\r\\n                $checkbox.prop('checked', false);\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Builds the filter.\\r\\n         */\\r\\n        buildFilter: function() {\\r\\n\\r\\n            // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\\r\\n            if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\\r\\n                var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\\r\\n\\r\\n                if (this.$select.find('option').length >= enableFilterLength) {\\r\\n\\r\\n                    this.$filter = $(this.options.templates.filter);\\r\\n                    $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);\\r\\n\\r\\n                    // Adds optional filter clear button\\r\\n                    if(this.options.includeFilterClearBtn){\\r\\n                        var clearBtn = $(this.options.templates.filterClearBtn);\\r\\n                        clearBtn.on('click', $.proxy(function(event){\\r\\n                            clearTimeout(this.searchTimeout);\\r\\n                            this.$filter.find('.multiselect-search').val('');\\r\\n                            $('li', this.$ul).show().removeClass(\\\"filter-hidden\\\");\\r\\n                            this.updateSelectAll();\\r\\n                        }, this));\\r\\n                        this.$filter.find('.input-group').append(clearBtn);\\r\\n                    }\\r\\n\\r\\n                    this.$ul.prepend(this.$filter);\\r\\n\\r\\n                    this.$filter.val(this.query).on('click', function(event) {\\r\\n                        event.stopPropagation();\\r\\n                    }).on('input keydown', $.proxy(function(event) {\\r\\n                        // Cancel enter key default behaviour\\r\\n                        if (event.which === 13) {\\r\\n                          event.preventDefault();\\r\\n                        }\\r\\n\\r\\n                        // This is useful to catch \\\"keydown\\\" events after the browser has updated the control.\\r\\n                        clearTimeout(this.searchTimeout);\\r\\n\\r\\n                        this.searchTimeout = this.asyncFunction($.proxy(function() {\\r\\n\\r\\n                            if (this.query !== event.target.value) {\\r\\n                                this.query = event.target.value;\\r\\n\\r\\n                                var currentGroup, currentGroupVisible;\\r\\n                                $.each($('li', this.$ul), $.proxy(function(index, element) {\\r\\n                                    var value = $('input', element).length > 0 ? $('input', element).val() : \\\"\\\";\\r\\n                                    var text = $('label', element).text();\\r\\n\\r\\n                                    var filterCandidate = '';\\r\\n                                    if ((this.options.filterBehavior === 'text')) {\\r\\n                                        filterCandidate = text;\\r\\n                                    }\\r\\n                                    else if ((this.options.filterBehavior === 'value')) {\\r\\n                                        filterCandidate = value;\\r\\n                                    }\\r\\n                                    else if (this.options.filterBehavior === 'both') {\\r\\n                                        filterCandidate = text + '\\\\n' + value;\\r\\n                                    }\\r\\n\\r\\n                                    if (value !== this.options.selectAllValue && text) {\\r\\n\\r\\n                                        // By default lets assume that element is not\\r\\n                                        // interesting for this search.\\r\\n                                        var showElement = false;\\r\\n\\r\\n                                        if (this.options.enableCaseInsensitiveFiltering) {\\r\\n                                            filterCandidate = filterCandidate.toLowerCase();\\r\\n                                            this.query = this.query.toLowerCase();\\r\\n                                        }\\r\\n\\r\\n                                        if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {\\r\\n                                            var valueToMatch = filterCandidate.trim().substring(0, this.query.length);\\r\\n                                            if (this.query.indexOf(valueToMatch) > -1) {\\r\\n                                                showElement = true;\\r\\n                                            }\\r\\n                                        }\\r\\n                                        else if (filterCandidate.indexOf(this.query) > -1) {\\r\\n                                            showElement = true;\\r\\n                                        }\\r\\n\\r\\n                                        // Toggle current element (group or group item) according to showElement boolean.\\r\\n                                        $(element).toggle(showElement).toggleClass('filter-hidden', !showElement);\\r\\n\\r\\n                                        // Differentiate groups and group items.\\r\\n                                        if ($(element).hasClass('multiselect-group')) {\\r\\n                                            // Remember group status.\\r\\n                                            currentGroup = element;\\r\\n                                            currentGroupVisible = showElement;\\r\\n                                        }\\r\\n                                        else {\\r\\n                                            // Show group name when at least one of its items is visible.\\r\\n                                            if (showElement) {\\r\\n                                                $(currentGroup).show().removeClass('filter-hidden');\\r\\n                                            }\\r\\n\\r\\n                                            // Show all group items when group name satisfies filter.\\r\\n                                            if (!showElement && currentGroupVisible) {\\r\\n                                                $(element).show().removeClass('filter-hidden');\\r\\n                                            }\\r\\n                                        }\\r\\n                                    }\\r\\n                                }, this));\\r\\n                            }\\r\\n\\r\\n                            this.updateSelectAll();\\r\\n                        }, this), 300, this);\\r\\n                    }, this));\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Unbinds the whole plugin.\\r\\n         */\\r\\n        destroy: function() {\\r\\n            this.$container.remove();\\r\\n            this.$select.show();\\r\\n            this.$select.data('multiselect', null);\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Refreshs the multiselect based on the selected options of the select.\\r\\n         */\\r\\n        refresh: function () {\\r\\n            var inputs = $.map($('li input', this.$ul), $);\\r\\n\\r\\n            $('option', this.$select).each($.proxy(function (index, element) {\\r\\n                var $elem = $(element);\\r\\n                var value = $elem.val();\\r\\n                var $input;\\r\\n                for (var i = inputs.length; 0 < i--; /**/) {\\r\\n                    if (value !== ($input = inputs[i]).val())\\r\\n                        continue; // wrong li\\r\\n\\r\\n                    if ($elem.is(':selected')) {\\r\\n                        $input.prop('checked', true);\\r\\n\\r\\n                        if (this.options.selectedClass) {\\r\\n                            $input.closest('li')\\r\\n                                .addClass(this.options.selectedClass);\\r\\n                        }\\r\\n                    }\\r\\n                    else {\\r\\n                        $input.prop('checked', false);\\r\\n\\r\\n                        if (this.options.selectedClass) {\\r\\n                            $input.closest('li')\\r\\n                                .removeClass(this.options.selectedClass);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if ($elem.is(\\\":disabled\\\")) {\\r\\n                        $input.attr('disabled', 'disabled')\\r\\n                            .prop('disabled', true)\\r\\n                            .closest('li')\\r\\n                            .addClass('disabled');\\r\\n                    }\\r\\n                    else {\\r\\n                        $input.prop('disabled', false)\\r\\n                            .closest('li')\\r\\n                            .removeClass('disabled');\\r\\n                    }\\r\\n                    break; // assumes unique values\\r\\n                }\\r\\n            }, this));\\r\\n\\r\\n            this.updateButtonText();\\r\\n            this.updateSelectAll();\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Select all options of the given values.\\r\\n         *\\r\\n         * If triggerOnChange is set to true, the on change event is triggered if\\r\\n         * and only if one value is passed.\\r\\n         *\\r\\n         * @param {Array} selectValues\\r\\n         * @param {Boolean} triggerOnChange\\r\\n         */\\r\\n        select: function(selectValues, triggerOnChange) {\\r\\n            if(!$.isArray(selectValues)) {\\r\\n                selectValues = [selectValues];\\r\\n            }\\r\\n\\r\\n            for (var i = 0; i < selectValues.length; i++) {\\r\\n                var value = selectValues[i];\\r\\n\\r\\n                if (value === null || value === undefined) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                var $option = this.getOptionByValue(value);\\r\\n                var $checkbox = this.getInputByValue(value);\\r\\n\\r\\n                if($option === undefined || $checkbox === undefined) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (!this.options.multiple) {\\r\\n                    this.deselectAll(false);\\r\\n                }\\r\\n\\r\\n                if (this.options.selectedClass) {\\r\\n                    $checkbox.closest('li')\\r\\n                        .addClass(this.options.selectedClass);\\r\\n                }\\r\\n\\r\\n                $checkbox.prop('checked', true);\\r\\n                $option.prop('selected', true);\\r\\n\\r\\n                if (triggerOnChange) {\\r\\n                    this.options.onChange($option, true);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            this.updateButtonText();\\r\\n            this.updateSelectAll();\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Clears all selected items.\\r\\n         */\\r\\n        clearSelection: function () {\\r\\n            this.deselectAll(false);\\r\\n            this.updateButtonText();\\r\\n            this.updateSelectAll();\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Deselects all options of the given values.\\r\\n         *\\r\\n         * If triggerOnChange is set to true, the on change event is triggered, if\\r\\n         * and only if one value is passed.\\r\\n         *\\r\\n         * @param {Array} deselectValues\\r\\n         * @param {Boolean} triggerOnChange\\r\\n         */\\r\\n        deselect: function(deselectValues, triggerOnChange) {\\r\\n            if(!$.isArray(deselectValues)) {\\r\\n                deselectValues = [deselectValues];\\r\\n            }\\r\\n\\r\\n            for (var i = 0; i < deselectValues.length; i++) {\\r\\n                var value = deselectValues[i];\\r\\n\\r\\n                if (value === null || value === undefined) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                var $option = this.getOptionByValue(value);\\r\\n                var $checkbox = this.getInputByValue(value);\\r\\n\\r\\n                if($option === undefined || $checkbox === undefined) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (this.options.selectedClass) {\\r\\n                    $checkbox.closest('li')\\r\\n                        .removeClass(this.options.selectedClass);\\r\\n                }\\r\\n\\r\\n                $checkbox.prop('checked', false);\\r\\n                $option.prop('selected', false);\\r\\n\\r\\n                if (triggerOnChange) {\\r\\n                    this.options.onChange($option, false);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            this.updateButtonText();\\r\\n            this.updateSelectAll();\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Selects all enabled & visible options.\\r\\n         *\\r\\n         * If justVisible is true or not specified, only visible options are selected.\\r\\n         *\\r\\n         * @param {Boolean} justVisible\\r\\n         * @param {Boolean} triggerOnSelectAll\\r\\n         */\\r\\n        selectAll: function (justVisible, triggerOnSelectAll) {\\r\\n            justVisible = (this.options.enableCollapsibleOptGroups && this.options.multiple) ? false : justVisible;\\r\\n\\r\\n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\\r\\n            var allCheckboxes = $(\\\"li input[type='checkbox']:enabled\\\", this.$ul);\\r\\n            var visibleCheckboxes = allCheckboxes.filter(\\\":visible\\\");\\r\\n            var allCheckboxesCount = allCheckboxes.length;\\r\\n            var visibleCheckboxesCount = visibleCheckboxes.length;\\r\\n\\r\\n            if(justVisible) {\\r\\n                visibleCheckboxes.prop('checked', true);\\r\\n                $(\\\"li:not(.divider):not(.disabled)\\\", this.$ul).filter(\\\":visible\\\").addClass(this.options.selectedClass);\\r\\n            }\\r\\n            else {\\r\\n                allCheckboxes.prop('checked', true);\\r\\n                $(\\\"li:not(.divider):not(.disabled)\\\", this.$ul).addClass(this.options.selectedClass);\\r\\n            }\\r\\n\\r\\n            if (allCheckboxesCount === visibleCheckboxesCount || justVisible === false) {\\r\\n                $(\\\"option:not([data-role='divider']):enabled\\\", this.$select).prop('selected', true);\\r\\n            }\\r\\n            else {\\r\\n                var values = visibleCheckboxes.map(function() {\\r\\n                    return $(this).val();\\r\\n                }).get();\\r\\n\\r\\n                $(\\\"option:enabled\\\", this.$select).filter(function(index) {\\r\\n                    return $.inArray($(this).val(), values) !== -1;\\r\\n                }).prop('selected', true);\\r\\n            }\\r\\n\\r\\n            if (triggerOnSelectAll) {\\r\\n                this.options.onSelectAll();\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Deselects all options.\\r\\n         *\\r\\n         * If justVisible is true or not specified, only visible options are deselected.\\r\\n         *\\r\\n         * @param {Boolean} justVisible\\r\\n         */\\r\\n        deselectAll: function (justVisible) {\\r\\n            justVisible = (this.options.enableCollapsibleOptGroups && this.options.multiple) ? false : justVisible;\\r\\n            justVisible = typeof justVisible === 'undefined' ? true : justVisible;\\r\\n\\r\\n            if(justVisible) {\\r\\n                var visibleCheckboxes = $(\\\"li input[type='checkbox']:not(:disabled)\\\", this.$ul).filter(\\\":visible\\\");\\r\\n                visibleCheckboxes.prop('checked', false);\\r\\n\\r\\n                var values = visibleCheckboxes.map(function() {\\r\\n                    return $(this).val();\\r\\n                }).get();\\r\\n\\r\\n                $(\\\"option:enabled\\\", this.$select).filter(function(index) {\\r\\n                    return $.inArray($(this).val(), values) !== -1;\\r\\n                }).prop('selected', false);\\r\\n\\r\\n                if (this.options.selectedClass) {\\r\\n                    $(\\\"li:not(.divider):not(.disabled)\\\", this.$ul).filter(\\\":visible\\\").removeClass(this.options.selectedClass);\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                $(\\\"li input[type='checkbox']:enabled\\\", this.$ul).prop('checked', false);\\r\\n                $(\\\"option:enabled\\\", this.$select).prop('selected', false);\\r\\n\\r\\n                if (this.options.selectedClass) {\\r\\n                    $(\\\"li:not(.divider):not(.disabled)\\\", this.$ul).removeClass(this.options.selectedClass);\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Rebuild the plugin.\\r\\n         *\\r\\n         * Rebuilds the dropdown, the filter and the select all option.\\r\\n         */\\r\\n        rebuild: function() {\\r\\n            this.$ul.html('');\\r\\n\\r\\n            // Important to distinguish between radios and checkboxes.\\r\\n            this.options.multiple = this.$select.attr('multiple') === \\\"multiple\\\";\\r\\n\\r\\n            this.buildSelectAll();\\r\\n            this.buildDropdownOptions();\\r\\n            this.buildFilter();\\r\\n\\r\\n            this.updateButtonText();\\r\\n            this.updateSelectAll(true);\\r\\n\\r\\n            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\\r\\n                this.disable();\\r\\n            }\\r\\n            else {\\r\\n                this.enable();\\r\\n            }\\r\\n\\r\\n            if (this.options.dropRight) {\\r\\n                this.$ul.addClass('pull-right');\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * The provided data will be used to build the dropdown.\\r\\n         */\\r\\n        dataprovider: function(dataprovider) {\\r\\n\\r\\n            var groupCounter = 0;\\r\\n            var $select = this.$select.empty();\\r\\n\\r\\n            $.each(dataprovider, function (index, option) {\\r\\n                var $tag;\\r\\n\\r\\n                if ($.isArray(option.children)) { // create optiongroup tag\\r\\n                    groupCounter++;\\r\\n\\r\\n                    $tag = $('<optgroup/>').attr({\\r\\n                        label: option.label || 'Group ' + groupCounter,\\r\\n                        disabled: !!option.disabled\\r\\n                    });\\r\\n\\r\\n                    forEach(option.children, function(subOption) { // add children option tags\\r\\n                        $tag.append($('<option/>').attr({\\r\\n                            value: subOption.value,\\r\\n                            label: subOption.label || subOption.value,\\r\\n                            title: subOption.title,\\r\\n                            selected: !!subOption.selected,\\r\\n                            disabled: !!subOption.disabled\\r\\n                        }));\\r\\n                    });\\r\\n                }\\r\\n                else {\\r\\n                    $tag = $('<option/>').attr({\\r\\n                        value: option.value,\\r\\n                        label: option.label || option.value,\\r\\n                        title: option.title,\\r\\n                        class: option.class,\\r\\n                        selected: !!option.selected,\\r\\n                        disabled: !!option.disabled\\r\\n                    });\\r\\n                    $tag.text(option.label || option.value);\\r\\n                }\\r\\n\\r\\n                $select.append($tag);\\r\\n            });\\r\\n\\r\\n            this.rebuild();\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Enable the multiselect.\\r\\n         */\\r\\n        enable: function() {\\r\\n            this.$select.prop('disabled', false);\\r\\n            this.$button.prop('disabled', false)\\r\\n                .removeClass('disabled');\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Disable the multiselect.\\r\\n         */\\r\\n        disable: function() {\\r\\n            this.$select.prop('disabled', true);\\r\\n            this.$button.prop('disabled', true)\\r\\n                .addClass('disabled');\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Set the options.\\r\\n         *\\r\\n         * @param {Array} options\\r\\n         */\\r\\n        setOptions: function(options) {\\r\\n            this.options = this.mergeOptions(options);\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Merges the given options with the default options.\\r\\n         *\\r\\n         * @param {Array} options\\r\\n         * @returns {Array}\\r\\n         */\\r\\n        mergeOptions: function(options) {\\r\\n            return $.extend(true, {}, this.defaults, this.options, options);\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Checks whether a select all checkbox is present.\\r\\n         *\\r\\n         * @returns {Boolean}\\r\\n         */\\r\\n        hasSelectAll: function() {\\r\\n            return $('li.multiselect-all', this.$ul).length > 0;\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Updates the select all checkbox based on the currently displayed and selected checkboxes.\\r\\n         */\\r\\n        updateSelectAll: function(notTriggerOnSelectAll) {\\r\\n            if (this.hasSelectAll()) {\\r\\n                var allBoxes = $(\\\"li:not(.multiselect-item):not(.filter-hidden) input:enabled\\\", this.$ul);\\r\\n                var allBoxesLength = allBoxes.length;\\r\\n                var checkedBoxesLength = allBoxes.filter(\\\":checked\\\").length;\\r\\n                var selectAllLi  = $(\\\"li.multiselect-all\\\", this.$ul);\\r\\n                var selectAllInput = selectAllLi.find(\\\"input\\\");\\r\\n\\r\\n                if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\\r\\n                    selectAllInput.prop(\\\"checked\\\", true);\\r\\n                    selectAllLi.addClass(this.options.selectedClass);\\r\\n                    this.options.onSelectAll(true);\\r\\n                }\\r\\n                else {\\r\\n                    selectAllInput.prop(\\\"checked\\\", false);\\r\\n                    selectAllLi.removeClass(this.options.selectedClass);\\r\\n                    if (checkedBoxesLength === 0) {\\r\\n                        if (!notTriggerOnSelectAll) {\\r\\n                            this.options.onSelectAll(false);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Update the button text and its title based on the currently selected options.\\r\\n         */\\r\\n        updateButtonText: function() {\\r\\n            var options = this.getSelected();\\r\\n\\r\\n            // First update the displayed button text.\\r\\n            if (this.options.enableHTML) {\\r\\n                $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\\r\\n            }\\r\\n            else {\\r\\n                $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\\r\\n            }\\r\\n\\r\\n            // Now update the title attribute of the button.\\r\\n            $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Get all selected options.\\r\\n         *\\r\\n         * @returns {jQUery}\\r\\n         */\\r\\n        getSelected: function() {\\r\\n            return $('option', this.$select).filter(\\\":selected\\\");\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Gets a select option by its value.\\r\\n         *\\r\\n         * @param {String} value\\r\\n         * @returns {jQuery}\\r\\n         */\\r\\n        getOptionByValue: function (value) {\\r\\n\\r\\n            var options = $('option', this.$select);\\r\\n            var valueToCompare = value.toString();\\r\\n\\r\\n            for (var i = 0; i < options.length; i = i + 1) {\\r\\n                var option = options[i];\\r\\n                if (option.value === valueToCompare) {\\r\\n                    return $(option);\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Get the input (radio/checkbox) by its value.\\r\\n         *\\r\\n         * @param {String} value\\r\\n         * @returns {jQuery}\\r\\n         */\\r\\n        getInputByValue: function (value) {\\r\\n\\r\\n            var checkboxes = $('li input', this.$ul);\\r\\n            var valueToCompare = value.toString();\\r\\n\\r\\n            for (var i = 0; i < checkboxes.length; i = i + 1) {\\r\\n                var checkbox = checkboxes[i];\\r\\n                if (checkbox.value === valueToCompare) {\\r\\n                    return $(checkbox);\\r\\n                }\\r\\n            }\\r\\n        },\\r\\n\\r\\n        /**\\r\\n         * Used for knockout integration.\\r\\n         */\\r\\n        updateOriginalOptions: function() {\\r\\n            this.originalOptions = this.$select.clone()[0].options;\\r\\n        },\\r\\n\\r\\n        asyncFunction: function(callback, timeout, self) {\\r\\n            var args = Array.prototype.slice.call(arguments, 3);\\r\\n            return setTimeout(function() {\\r\\n                callback.apply(self || window, args);\\r\\n            }, timeout);\\r\\n        },\\r\\n\\r\\n        setAllSelectedText: function(allSelectedText) {\\r\\n            this.options.allSelectedText = allSelectedText;\\r\\n            this.updateButtonText();\\r\\n        }\\r\\n    };\\r\\n\\r\\n    $.fn.multiselect = function(option, parameter, extraOptions) {\\r\\n        return this.each(function() {\\r\\n            var data = $(this).data('multiselect');\\r\\n            var options = typeof option === 'object' && option;\\r\\n\\r\\n            // Initialize the multiselect.\\r\\n            if (!data) {\\r\\n                data = new Multiselect(this, options);\\r\\n                $(this).data('multiselect', data);\\r\\n            }\\r\\n\\r\\n            // Call multiselect method.\\r\\n            if (typeof option === 'string') {\\r\\n                data[option](parameter, extraOptions);\\r\\n\\r\\n                if (option === 'destroy') {\\r\\n                    $(this).data('multiselect', false);\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n\\r\\n    $.fn.multiselect.Constructor = Multiselect;\\r\\n\\r\\n    $(function() {\\r\\n        $(\\\"select[data-role=multiselect]\\\").multiselect();\\r\\n    });\\r\\n\\r\\n}(window.jQuery);\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./public/module/bootstrap-multiselect/bootstrap-multiselect.js\n// module id = 298\n// module chunks = 12 13","require(\"!!C:\\\\cloud\\\\src\\\\main\\\\webapp\\\\node_modules\\\\script-loader\\\\addScript.js\")(require(\"!!C:\\\\cloud\\\\src\\\\main\\\\webapp\\\\node_modules\\\\raw-loader\\\\index.js!C:\\\\cloud\\\\src\\\\main\\\\webapp\\\\public\\\\module\\\\bootstrap-multiselect\\\\bootstrap-multiselect.js\"))\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/script-loader!./public/module/bootstrap-multiselect/bootstrap-multiselect.js\n// module id = 303\n// module chunks = 12 13","import 'script-loader!bootstrap-multiselect/bootstrap-multiselect.js';\r\nimport 'bootstrap-multiselect/bootstrap-multiselect.css';\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./components/multiselect/index.ts","import * as utils from 'utils';\r\nimport * as nTables from 'new-table';\r\nimport * as tables from 'tables';\r\nimport './index.less';\r\nimport 'multiselect';\r\nimport 'select';\r\nnamespace SettingUserIndex{\r\n\t$(function () {\r\n\t\t/*$('.multiselect').multiselect({\r\n\t\t\tbuttonWidth: '330px'\r\n\t\t});\r\n\t\t$('#addUserButton').mouseenter(function () {\r\n\t\t\t$('#addUserButton').popover('toggle');\r\n\t\t});\r\n\t\t$('#addUserButton').mouseleave(function () {\r\n\t\t\t$('#addUserButton').popover('hide');\r\n\t\t});\r\n\t\t$('#addUser').on('hidden.bs.modal', function(){\r\n\t\t\t$('#email_input').val('');\r\n\t\t\t$('#mobile_input').val('');\r\n\t\t\t$('#alias_input').val('');\r\n\t\t\t$('#pwd_input').val('');\r\n\t\t\t$('#repwd_input').val('');\r\n\t\t\t$('#roleSelect').multiselect('clearSelection');\r\n\t\t\t$('#roleSelect').multiselect('refresh');\r\n\t\t\t$('#qq_input').val('');\r\n\t\t\t$('#wxAppSecret-add-input').val(null).trigger('change');\r\n\t\t});\r\n\t\t$('#addUser').on('shown.bs.modal', function(){\r\n\t\t\t$('#wxAppSecret-add-input').select2({\r\n\t\t\t\tplaceholder: '请选择微信公众号',\r\n\t\t\t\tallowClear: true,\r\n\t\t\t\tminimumResultsForSearch: Infinity\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$('#editUser').on('shown.bs.modal', function(){\r\n\t\t\t$('#wxAppSecret-edit-input').select2({\r\n\t\t\t\tplaceholder: '请选择微信公众号',\r\n\t\t\t\tallowClear: true,\r\n\t\t\t\tminimumResultsForSearch: Infinity\r\n\t\t\t});\r\n\t\t});*/\r\n\t\tinitTable();\r\n\t});\r\n\tconst tableEl=$('#usertable');\r\n\tlet userTable;\r\n\tfunction initTable(){\r\n\t\tuserTable=new nTables.Table({\r\n\t\t\tel:tableEl,\r\n\t\t\toptions:{\r\n\t\t\t\tserverSide:true,\r\n\t\t\t\t// paging:true,\r\n\t\t\t\tajax: {\r\n\t\t\t\t\turl: 'setting/user/lowerAdmin/list',\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\tdataSrc: data => data.msg,\r\n\t\t\t\t\tdata: (data:any) => {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t\t/*return utils.cleanObject({\r\n\t\t\t\t\t\t\tpage: tables.getPage(data),\r\n\t\t\t\t\t\t\trows: data.length\r\n\t\t\t\t\t\t});*/\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tcolumns: [\r\n\t\t\t\t\t{data:'alias',title:'名称'},\r\n\t\t\t\t\t{data:'email',title:'email'},\r\n\t\t\t\t\t{data:'mobile',title:'手机号'},\r\n\t\t\t\t\t{data:'alias',title:'成员角色'},\r\n\t\t\t\t\t{data:'alias',title:'微信公众号'},\r\n\t\t\t\t\t{data:'id',title:'操作',render:renderBtns,className:'prevent'}\r\n\t\t\t\t],\r\n\t\t\t\tinitComplete: initComplete\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tfunction renderBtns(id){\r\n\t\treturn `<div data-id='${id}'><i class='fa fa-edit view-edit' title='编辑' style='cursor:pointer'></i><i class='fa fa-trash view-delete' title='删除' style='cursor:pointer'></i></div>`;\r\n\t}\r\n\tfunction initComplete(){\r\n\t\tbindEditEvent();\r\n\t\tbindDelEvent();\r\n\t}\r\n\t// 编辑\r\n\tfunction bindEditEvent(){\r\n\t\ttableEl.on('click','.view-edit',function(){\r\n\t\t\tconst id=$(this).parent('div').data('id');\r\n\r\n\t\t});\r\n\t}\r\n\tfunction bindEditSubmitEvent(){\r\n\t\t/*$.ajax({\r\n\t\t\turl:'setting/user/lowerAdmin/delete',\r\n\t\t\tmethod:'POST',\r\n\t\t\tdata:{\r\n\t\t\t\tuserids:id\r\n\t\t\t},\r\n\t\t\tsuccess:(msg)=>{\r\n\t\t\t\tutils.alertMessage('ddd');\r\n\t\t\t}\r\n\t\t});*/\r\n\t}\r\n\t// 添加\r\n\tfunction bindAddEvent(){\r\n\t\t\r\n\t}\r\n\t// 删除\r\n\tfunction bindDelEvent(){\r\n\t\ttableEl.on('click','.view-delete',function(){\r\n\t\t\tconst id=$(this).parent('div').data('id');\r\n\t\t\tutils.confirmModal({\r\n\t\t\t\tmsg: `确认删除选中的成员吗?`,\r\n\t\t\t\tcb: (modal, btn) => {\r\n\t\t\t\t\tconst endLoading = utils.loadingBtn(btn);\r\n\t\t\t\t\t$.ajax({\r\n\t\t\t\t\t\turl:'setting/user/lowerAdmin/delete',\r\n\t\t\t\t\t\ttype:'POST',\r\n\t\t\t\t\t\tdata:{\r\n\t\t\t\t\t\t\tuserids:id\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsuccess: (msg) => {\r\n\t\t\t\t\t\t\tif (!msg.error) {\r\n\t\t\t\t\t\t\t\tuserTable.reload();\r\n\t\t\t\t\t\t\t\tmodal.modal('hide');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tutils.alertMessage(msg.msg, !msg.error);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcomplete: () => {\r\n\t\t\t\t\t\t\tendLoading();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// function emailCheckUnique(){\r\n\t// \tlet email = $('#email_input').val().trim();\r\n\t// \t$.post(/*appName + */'/register/isUniqueUserEmail', {\r\n\t// \t\t\t'email': email\r\n\t// \t\t}, function (data) {\r\n\t// \t\t\tif (data === '2') {\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '注册失败',\r\n\t// \t\t\t\t\ttext: '该邮箱已注册，请直接登录',\r\n\t// \t\t\t\t\ttype: 'error'\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\treturn;\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// }\r\n\t// function tellCheckUnique(){\r\n\t// \tlet mobile = $('#mobile_input').val().trim();\r\n\t// \t/**\r\n\t// \t * 手机唯一验证\r\n\t// \t */\r\n\t// \t$.post(/*appName + */'/register/isUniqueUserMobile', {\r\n\t// \t\t'mobile': mobile\r\n\t// \t}, function (data) {\r\n\t// \t\tif(data ==='2'){\r\n\t// \t\t\tnew PNotify({\r\n\t// \t\t\t\ttitle: '注册失败',\r\n\t// \t\t\t\ttext: '该手机已注册，请直接登录',\r\n\t// \t\t\t\ttype: 'error'\r\n\t// \t\t\t});\r\n\t// \t\t\treturn;\r\n\t// \t\t}\r\n\t// \t});\r\n\t// }\r\n\t// let trhtml;\r\n\t// function addRecordDynamically(id, alias, email, molile, role,regWxName) {\r\n\t// \ttrhtml = '<tr id=\"record-' + id + '\" class=\"even pointer\">';\r\n\t// \tif (alias ===''){\r\n\t// \t\talias = '未指定';\r\n\t// \t}\r\n\t// \tif (regWxName ===''){\r\n\t// \t\tregWxName = '未指定';\r\n\t// \t}\r\n\t// \ttrhtml += '<td class=\" \">' + alias + '</td>';\r\n\t// \ttrhtml += '<td class=\" \">' + email + '</td>';\r\n\t// \ttrhtml += '<td class=\" \">' + molile + '</td>';\r\n\t// \ttrhtml += '<td class=\" \">' + role + '</td>';\r\n\t// \ttrhtml += '<td class=\" \">' +regWxName + '</td>';\r\n\t// \ttrhtml += '<td class=\"last\">';\r\n\t// \ttrhtml += '<a onclick=\"editUser(\\'' + id +\r\n\t// \t\t'\\')\" href=\"javascript:;\">编辑</a>';\r\n\t// \ttrhtml += '<a onclick=\"delUser(\\'' + id +\r\n\t// \t\t'\\')\" href=\"javascript:;\">删除</a>';\r\n\t// \ttrhtml += '</td>';\r\n\t// \ttrhtml += '</tr>';\r\n\t// \t$('#usertable').append(trhtml);\r\n\t// }\r\n\r\n\t// function editRecordDynamically(id, alias, email, molile, role,wxName) {\r\n\t// \tif (alias ===''){\r\n\t// \t\talias = '未指定';\r\n\t// \t}\r\n\t// \tif (wxName === '') {\r\n\t// \t\twxName = '未指定';\r\n\t// \t}\r\n\t// \ttrhtml = '<td class=\" \">' + alias + '</td>';\r\n\t// \ttrhtml += '<td class=\" \">' + email + '</td>';\r\n\t// \ttrhtml += '<td class=\" \">' + molile + '</td>';\r\n\t// \ttrhtml += '<td class=\" \">' + role + '</td>';\r\n\t// \ttrhtml += '<td class=\" \">' + wxName + '</td>';\r\n\t// \ttrhtml += '<td class=\"last\">';\r\n\t// \ttrhtml += '<a onclick=\"editUser(\\'' + id +\r\n\t// \t\t'\\')\" href=\"javascript:;\">编辑</a>';\r\n\t// \ttrhtml += '<a onclick=\"delUser(\\'' + id +\r\n\t// \t\t'\\')\" href=\"javascript:;\">删除</a>';\r\n\t// \ttrhtml += '</td>';\r\n\r\n\t// \t$('#record-' + id).html(trhtml);\r\n\t// }\r\n\r\n\t// function doReg() {\r\n\t// \tlet email = $('#email_input').val().trim();\r\n\t// \tlet mobile = $('#mobile_input').val().trim();\r\n\t// \tlet pwd = $('#pwd_input').val().trim();\r\n\t// \tlet repwd = $('#repwd_input').val().trim();\r\n\t// \tlet alias = $('#alias_input').val().trim();\r\n\t// \tlet qq = $('#qq_input').val().trim();\r\n\t// \tlet credentialId=$.trim($('#wxAppSecret-add-input option:selected').val());\r\n\t// \tlet regWxName=$.trim($('#wxAppSecret-add-input option:selected').text());\r\n\t// \tif (email === undefined || email === '') {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '请填写邮箱',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t} else {\r\n\t// \t\tlet eReg = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/;\r\n\t// \t\tif (!eReg.test(email)) {\r\n\t// \t\t\tnew PNotify({\r\n\t// \t\t\t\ttitle: '注册失败',\r\n\t// \t\t\t\ttext: '电子邮箱格式不正确',\r\n\t// \t\t\t\ttype: 'error'\r\n\t// \t\t\t});\r\n\t// \t\t\treturn;\r\n\t// \t\t}\r\n\t// \t}\r\n\t// \tif (mobile === undefined || mobile === '') {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '请填写手机号',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t} else {\r\n\t// \t\tlet reg = /^0?(13[0-9]|15[012356789]|18[02356789]|14[57]|17[0678])[0-9]{8}$/;\r\n\t// \t\tif (!reg.test(mobile)) {\r\n\t// \t\t\treg = /^0?(170[059])[0-9]{7}$/;\r\n\t// \t\t\tif (!reg.test(mobile)) {\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '注册失败',\r\n\t// \t\t\t\t\ttext: '手机号码格式不正确',\r\n\t// \t\t\t\t\ttype: 'error'\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\treturn;\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t}\r\n\r\n\t// \tif (alias === '') {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '联系人不能为空',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tif (pwd === undefined || pwd === '') {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '密码不能为空',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tif (pwd.length < 6) {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '密码不能小于6位',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tif (repwd === undefined || repwd === '') {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '确认密码不能为空',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tif (repwd.length < 6) {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '确认密码不能小于6位',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tif (pwd !== repwd) {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '密码不一致',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tif ($('#roleSelect').val() === undefined || $('#roleSelect').val() === '') {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '注册失败',\r\n\t// \t\t\ttext: '成员角色不能为空',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tlet roles = $('#roleSelect').val().join(',');\r\n\r\n\r\n\t// \t$.ajax({\r\n\t// \t\turl: 'user/app/doReg',\r\n\t// \t\ttype: 'POST',\r\n\t// \t\tdata: {\r\n\t// \t\t\t'email': email,\r\n\t// \t\t\t'mobile': mobile,\r\n\t// \t\t\t'pwd': pwd,\r\n\t// \t\t\t'roles': roles,\r\n\t// \t\t\t'alias': alias,\r\n\t// \t\t\t'qq': qq,\r\n\t// \t\t\t'credentialId':credentialId\r\n\t// \t\t},\r\n\t// \t\tsuccess: function (data) {\r\n\t// \t\t\tPNotify.removeAll();\r\n\t// \t\t\tif (data.state === 'success') {\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '注册成功',\r\n\t// \t\t\t\t\ttext: '您已成功注册应用成员',\r\n\t// \t\t\t\t\ttype: 'success'\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\t$('#email_input').val('');\r\n\t// \t\t\t\t$('#mobile_input').val('');\r\n\t// \t\t\t\t$('#pwd_input').val('');\r\n\t// \t\t\t\t$('#repwd_input').val('');\r\n\t// \t\t\t\t$('#alias_input').val('');\r\n\t// \t\t\t\t$('#qq_input').val('');\r\n\t// \t\t\t\t$('#wxAppSecret-add-input').val(null).trigger('change');\r\n\t// \t\t\t\taddRecordDynamically(data.msg, alias, email, mobile, data.role,regWxName);\r\n\t// \t\t\t\t$('#addUser').modal('hide');\r\n\t// \t\t\t} else {\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '注册失败',\r\n\t// \t\t\t\t\ttext: data.msg,\r\n\t// \t\t\t\t\ttype: 'error'\r\n\t// \t\t\t\t});\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t});\r\n\r\n\t// }\r\n\t// let userDialog = undefined;\r\n\r\n\t// function delUser(userId) {\r\n\t// \tuserDialog = new BootstrapDialog.show({\r\n\t// \t\ttitle: '提示',\r\n\t// \t\tmessage: '确认删除?',\r\n\t// \t\tbuttons: [{\r\n\t// \t\t\tlabel: '确认',\r\n\t// \t\t\tcssClass: 'btn-primary',\r\n\t// \t\t\taction: function () {\r\n\t// \t\t\t\tajaxDeleteUser(userId);\r\n\t// \t\t\t}\r\n\t// \t\t}, {\r\n\t// \t\t\tlabel: '取消',\r\n\t// \t\t\tcssClass: 'btn-default',\r\n\t// \t\t\taction: function (dialogItself) {\r\n\t// \t\t\t\tdialogItself.close();\r\n\t// \t\t\t}\r\n\t// \t\t}]\r\n\t// \t});\r\n\t// }\r\n\r\n\t// function ajaxDeleteUser(userId) {\r\n\t// \t$.ajax({\r\n\t// \t\turl: 'user/app/delUser',\r\n\t// \t\tdata: {\r\n\t// \t\t\tuserId: userId\r\n\t// \t\t},\r\n\t// \t\ttype: 'post',\r\n\t// \t\tsuccess: function (data) {\r\n\t// \t\t\tif (data.state === 'success') {\r\n\t// \t\t\t\tuserDialog.close();\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '删除成功',\r\n\t// \t\t\t\t\ttext: '删除成功',\r\n\t// \t\t\t\t\ttype: 'success'\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\t$('#record-' + userId).remove();\r\n\t// \t\t\t} else {\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '删除失败',\r\n\t// \t\t\t\t\ttext: '删除失败',\r\n\t// \t\t\t\t\ttype: 'error'\r\n\t// \t\t\t\t});\r\n\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t});\r\n\t// }\r\n\t// // 点击编辑应用成员时，获取应用成员信息息\r\n\t// function editUser(userId) {\r\n\t// \t$.ajax({\r\n\t// \t\turl: 'user/app/getUser',\r\n\t// \t\ttype: 'POST',\r\n\t// \t\tdata: {\r\n\t// \t\t\t'userId': userId\r\n\t// \t\t},\r\n\t// \t\tsuccess: function (data) {\r\n\t// \t\t\tif (data.state === 'success') {\r\n\t// \t\t\t\t$('#email_edit').val(data.email);\r\n\t// \t\t\t\t$('#mobile_edit').val(data.mobile);\r\n\t// \t\t\t\t$('#alias_edit').val(data.alias);\r\n\t// \t\t\t\t$('#qq_edit').val(data.qq);\r\n\t// \t\t\t\t$('#wxAppSecret-edit-input').val(data.extraData).trigger('change');// 获取值\r\n\t// \t\t\t\tlet roles = new Array();\r\n\t// \t\t\t\troles = data.roles.split(',');\r\n\t// \t\t\t\t$('.edit-options').attr('selected', 'false');\r\n\t// \t\t\t\t$('#roleSelect_edit').multiselect('select', roles);\r\n\t// \t\t\t\t$('#roleSelect_edit').multiselect('refresh');\r\n\t// \t\t\t\t$('#userid').val(userId);\r\n\t// \t\t\t\t$('#editUser').modal('toggle');\r\n\t// \t\t\t} else {\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '编辑失败',\r\n\t// \t\t\t\t\ttext: '编辑失败',\r\n\t// \t\t\t\t\ttype: 'fail'\r\n\t// \t\t\t\t});\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t});\r\n\t// }\r\n\r\n\t// function doEditUser() {\r\n\t// \tlet userId = $('#userid').val().trim();\r\n\t// \tlet email = $('#email_edit').val().trim();\r\n\t// \tlet mobile = $('#mobile_edit').val().trim();\r\n\t// \tlet alias = $('#alias_edit').val().trim();\r\n\t// \tlet qq = $('#qq_edit').val().trim();\r\n\t// \tlet credentialId=$.trim($('#wxAppSecret-edit-input option:selected').val());\r\n\t// \tlet wxName=$.trim($('#wxAppSecret-edit-input option:selected').text());\r\n\t// \tif ($('#roleSelect_edit').val() === undefined || $('#roleSelect_edit').val() === '') {\r\n\t// \t\tnew PNotify({\r\n\t// \t\t\ttitle: '编辑失败',\r\n\t// \t\t\ttext: '成员角色不能为空',\r\n\t// \t\t\ttype: 'error'\r\n\t// \t\t});\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// \tlet roles = $('#roleSelect_edit').val().join(',');\r\n\t// \t$('#editUser').modal('hide');\r\n\r\n\t// \t$.ajax({\r\n\t// \t\turl: 'user/app/doEditUser',\r\n\t// \t\ttype: 'POST',\r\n\t// \t\tdata: {\r\n\t// \t\t\t'userId': userId,\r\n\t// \t\t\t'email': email,\r\n\t// \t\t\t'mobile': mobile,\r\n\t// \t\t\t'roles': roles,\r\n\t// \t\t\t'alias': alias,\r\n\t// \t\t\t'qq': qq,\r\n\t// \t\t\t'credentialId':credentialId\r\n\t// \t\t},\r\n\t// \t\tsuccess: function (data) {\r\n\t// \t\t\tPNotify.removeAll();\r\n\r\n\t// \t\t\tif (data.state ==='success'){\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '编辑成功',\r\n\t// \t\t\t\t\ttext: '您已成功编辑应用成员',\r\n\t// \t\t\t\t\ttype: 'success'\r\n\t// \t\t\t\t});\r\n\t// \t\t\t\t$('#userid').val('');\r\n\t// \t\t\t\t$('#email_edit').val('');\r\n\t// \t\t\t\t$('#mobile_edit').val('');\r\n\t// \t\t\t\t$('#alias_edit').val('');\r\n\t// \t\t\t\t$('#qq_edit').val('');\r\n\t// \t\t\t\t// $('#wxAppSecret_edit').val('');\r\n\t// \t\t\t\t$ ('#wxAppSecret-edit-input').val(null).trigger('change');\r\n\t// \t\t\t\t// location.reload();\r\n\t// \t\t\t\teditRecordDynamically(data.msg, alias, email, mobile, data.role, wxName);\r\n\t// \t\t\t} else {\r\n\t// \t\t\t\tnew PNotify({\r\n\t// \t\t\t\t\ttitle: '失败',\r\n\t// \t\t\t\t\ttext: /*data.msg*/ '失败',\r\n\t// \t\t\t\t\ttype: 'error'\r\n\t// \t\t\t\t});\r\n\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t});\r\n\r\n\t// }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./pages/setting/user/index/index.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./pages/setting/user/index/index.less\n// module id = 942\n// module chunks = 13"],"sourceRoot":""}